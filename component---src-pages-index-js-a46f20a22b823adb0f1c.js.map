{"version":3,"sources":["webpack:///./src/components/tech-list.js","webpack:///./src/components/links/text-link.js","webpack:///./src/components/_shared/styled-headings.js","webpack:///./src/components/_shared/styled-image-container.js","webpack:///./src/components/about.js","webpack:///./src/components/contact.js","webpack:///./src/components/card-grid.js","webpack:///./src/components/featured-projects.js","webpack:///./src/components/links/button-link.js","webpack:///./src/components/_shared/animation.js","webpack:///./src/components/scroll-indicator.js","webpack:///./src/components/hero.js","webpack:///./src/components/recent-posts.js","webpack:///./src/pages/index.js","webpack:///./src/components/_shared/styled-content-link.js","webpack:///./src/components/_shared/styled-text-section.js"],"names":["StyledTechContainer","styled","section","_templateObject","_taggedTemplateLiteralLoose","StyledTag","span","_templateObject2","TechList","_ref","techs","React","createElement","map","tech","key","Icon","icon","StyledTextLink","Link","flexCenter","TextLink","label","link","Fragment","to","StyledH1","h1","StyledH2","h2","StyledImageContainer","div","StyledStaticImageContainer","StyledAboutContainer","article","mq","gt","sm","StyledTextSection","About","data","_data$frontmatter","frontmatter","title","about_image","html","image","childImageSharp","fluid","StyledSection","id","Img","objectFit","dangerouslySetInnerHTML","__html","StyledContactSection","xs","_templateObject3","_templateObject4","_templateObject5","p","_templateObject6","StyledContainer","StyledFormContainer","StyledForm","StyledSeparator","StyledContacts","_templateObject7","Contact","email","phone","address","StyledFeaturedProject","StyledProjectInfoContainer","StyledDescription","contentBox","StyledLinkContainer","flexEnd","StyledArchiveContainer","FeaturedProjects","featuredProjects","featured","project","index","coverImage","cover_image","demoLink","demo_link","repoLink","repo_link","demoLinkLabel","repoLinkLabel","aria-label","href","target","rel","hasHover","StyledContentLink","prefix","StyledButtonLink","a","ButtonLink","scroll","keyframes","StyledMouse","StyledScroller","StyledScrollText","ScrollIndicator","StyledHeroSection","StyledIntroduction","StyledAuthor","StyledTagline","Hero","introduction","author","tagline","description","ctaLink","ctaLabel","Index","heroData","site","siteMetadata","hero","cta_label","cta_link","Layout","menuLinks","indexMenuLinks","SEO","about","nodes","contact"],"mappings":"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","file":"component---src-pages-index-js-a46f20a22b823adb0f1c.js","sourcesContent":["import styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Icon from './icon';\n\nconst StyledTechContainer = styled.section`\n  margin-top: 0.8rem;\n  display: flex;\n  flex-wrap: wrap;\n`;\nconst StyledTag = styled.span`\n  display: flex;\n  align-items: center;\n  white-space: nowrap;\n  font-size: 0.8rem;\n\n  color: var(--body-color);\n  margin: 0 1rem 0.5rem 0;\n\n  & > svg {\n    color: var(--primary-color);\n    height: 0.8rem;\n    margin-right: 0.25rem;\n  }\n`;\n\nconst TechList = ({ techs }) => {\n  return (\n    <StyledTechContainer>\n      {techs.map((tech) => (\n        <StyledTag key={tech}>\n          <Icon icon=\"caret-right\" />\n          {tech}\n        </StyledTag>\n      ))}\n    </StyledTechContainer>\n  );\n};\n\nTechList.propTypes = {\n  techs: PropTypes.array.isRequired,\n};\n\nexport default TechList;\n","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport React from 'react';\nimport Icon from '../icon';\nimport { flexCenter } from './../_shared/styled-mixins';\n\nexport const StyledTextLink = styled(Link)`\n  ${flexCenter};\n  text-decoration: none;\n  font-size: 1.5rem;\n  font-weight: 500;\n  white-space: nowrap;\n  padding: 0.4rem 0.8rem;\n  color: var(--primary-color);\n\n  &:hover {\n    color: var(--secondary-color);\n    text-decoration: underline;\n  }\n\n  & > svg {\n    height: 0.8rem;\n    fill: currentColor;\n    margin-left: 0.25rem;\n    transition: margin-left var(--transition-fast) ease;\n  }\n\n  &:hover > svg {\n    margin-left: 0.5rem;\n  }\n`;\n\nconst TextLink = ({ label, link }) => {\n  return (\n    <React.Fragment>\n      {label && link && (\n        <StyledTextLink to={link ? link : '#'}>\n          {label}\n          <Icon icon=\"arrow-right\" />\n        </StyledTextLink>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default TextLink;\n","import styled from '@emotion/styled';\n\nexport const StyledH1 = styled.h1`\n  width: 100%;\n  position: relative;\n  font-weight: 800;\n  // margin: 10px 0;\n\n  &:first-letter {\n    color: var(--primary-color);\n  }\n\n  &:after {\n    background-color: var(--primary-color);\n    content: '';\n    position: absolute;\n    top: -30px;\n    left: 0;\n    width: 30px;\n    height: 2px;\n  }\n`;\n\nexport const StyledH2 = styled.h2`\n  color: var(--title-color);\n  // margin: 20px 0;\n  position: relative;\n\n  &:after {\n    background-color: var(--primary-color);\n    content: '';\n    position: absolute;\n    top: -20px;\n    left: 0;\n    width: 30px;\n    height: 2px;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const StyledImageContainer = styled.div`\n  min-width: 300px;\n  min-height: 200px;\n  position: relative;\n  padding-top: 2rem;\n\n  & .gatsby-image-wrapper * {\n    transition: transform var(--transition-fast) ease-in-out !important;\n  }\n\n  &:hover .gatsby-image-wrapper * {\n    transform: scale(1.1);\n  }\n`;\n\nexport const StyledStaticImageContainer = styled.div`\n  min-width: 300px;\n  min-height: 200px;\n  position: relative;\n\n  .gatsby-image-wrapper {\n    overflow: unset !important;\n  }\n\n  .gatsby-image-wrapper:before {\n    content: '';\n    position: absolute;\n    bottom: -10px;\n    right: -10px;\n    width: 98%;\n    height: 98%;\n    border: 2px solid var(--primary-color);\n    transition: all ease var(--transition-fast);\n  }\n`;\n","import styled from '@emotion/styled';\nimport Img from 'gatsby-image';\nimport React from 'react';\nimport TechList from './tech-list';\nimport { mq } from './_shared/media';\nimport { StyledH1, StyledH2 } from './_shared/styled-headings';\nimport { StyledStaticImageContainer } from './_shared/styled-image-container';\nimport { StyledSection } from './_shared/styled-section';\n\nconst StyledAboutContainer = styled.article`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 1.5rem;\n  // padding: 1rem 0;\n\n  ${mq.gt.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;\nconst StyledTextSection = styled.section`\n  white-space: pre-line;\n`;\n\nconst About = ({ data }) => {\n  const {\n    frontmatter: { title, techs, about_image },\n    html,\n  } = data;\n\n  const image = about_image ? about_image.childImageSharp.fluid : null;\n\n  return (\n    <StyledSection id=\"about\">\n      <StyledH1>About Me</StyledH1>\n      <StyledAboutContainer>\n        {image && (\n          <StyledStaticImageContainer>\n            <Img fluid={image} objectFit=\"contain\" />\n          </StyledStaticImageContainer>\n        )}\n        <div>\n          <StyledH2>{title}</StyledH2>\n          <StyledTextSection dangerouslySetInnerHTML={{ __html: html }} />\n          <TechList techs={techs} />\n        </div>\n      </StyledAboutContainer>\n    </StyledSection>\n  );\n};\n\nAbout.propTypes = {};\n\nexport default About;\n","import styled from '@emotion/styled';\nimport React from 'react';\nimport Icon from './icon';\nimport { mq } from './_shared/media';\nimport { StyledH1 } from './_shared/styled-headings';\nimport { StyledSection } from './_shared/styled-section';\n\nconst StyledContactSection = styled(StyledSection)`\n  margin-bottom: 70px;\n`;\nconst StyledContainer = styled.section`\n  display: flex;\n  align-items: center;\n\n  & > svg {\n    font-size: 2rem;\n    margin-right: 0.75rem;\n  }\n`;\nconst StyledFormContainer = styled.section`\n  & > span {\n    font-size: 0.75rem;\n    font-weight: 500;\n  }\n`;\nconst StyledForm = styled.div`\n  color: var(--primary-color);\n\n  font-weight: normal;\n`;\nconst StyledTextSection = styled.section`\n  white-space: pre-line;\n  width: 100%;\n  max-width: 500px;\n  margin-left: 3px;\n`;\nconst StyledSeparator = styled.div`\n  height: 1px;\n  width: 50%;\n  background-color: var(--body-color);\n`;\nconst StyledContacts = styled.div`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 30px;\n  width: 100%;\n  margin-top: 2rem;\n\n  ${mq.gt.xs} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  ${mq.gt.sm} {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`;\n\nconst Contact = ({ data }) => {\n  const {\n    frontmatter: { phone, email, address },\n    html,\n  } = data;\n\n  return (\n    <React.Fragment>\n      <StyledContactSection id=\"contact\">\n        <StyledH1>Contact Me</StyledH1>\n        <StyledTextSection dangerouslySetInnerHTML={{ __html: html }} />\n        <StyledSeparator />\n        <StyledContacts>\n        {email && (\n            <StyledContainer>\n              <Icon icon=\"paper-plane\" />\n              <StyledFormContainer>\n                <StyledForm>My E-Mail</StyledForm>\n                <span>{email}</span>\n              </StyledFormContainer>\n            </StyledContainer>\n          )}\n          {address && (\n            <StyledContainer>\n              <Icon icon=\"home\" />\n              <StyledFormContainer>\n                <StyledForm>My Location</StyledForm>\n                <span>{address}</span>\n              </StyledFormContainer>\n            </StyledContainer>\n          )}\n          {/* {phone && (\n            <StyledContainer>\n              <Icon icon=\"mobile-alt\" />\n              <StyledFormContainer>\n                <StyledForm>Phone Number</StyledForm>\n                <span>{phone}</span>\n              </StyledFormContainer>\n            </StyledContainer>\n          )} */}\n        </StyledContacts>\n      </StyledContactSection>\n    </React.Fragment>\n  );\n};\n\nexport default Contact;\n","import styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Icon from './icon';\nimport { mq } from './_shared/media';\nimport { StyledH1 } from './_shared/styled-headings';\nimport { StyledSection } from './_shared/styled-section';\n\nconst StyledTextSection = styled.section`\n  white-space: pre-line;\n`;\nconst StyledFeatureGridContainer = styled.section`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 1.5rem;\n  margin-top: 1rem;\n  width: 100%;\n\n  ${mq.gt.xs} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  ${mq.gt.sm} {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`;\nconst StyledFeatureCard = styled.article`\n  border: 1px solid var(--body-color);\n  border-radius: var(--radius);\n\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  min-height: 200px;\n  padding: 1rem;\n\n  & svg {\n    height: 2rem;\n    width: 2rem;\n    font-size: 2rem;\n  }\n`;\nconst StyledCardLabel = styled.h2`\n  font-size: 1.5rem;\n  margin: rem 0;\n  color: var(--body-color);\n`;\nconst StyledDivider = styled.div`\n  width: 15%;\n  height: 2px;\n  background-color: var(--primary-color);\n  // margin-bottom: 1rem;\n`;\nconst StyledFeatureDescription = styled.p`\n  font-size: 0.8rem;\n`;\n\nconst CardGrid = ({ cards, description, title, id = null }) => {\n  const featureCards = cards.map(({ icon, prefix, label, description }, index) => {\n    return (\n      <StyledFeatureCard key={index}>\n        <Icon icon={icon} prefix={prefix} />\n        <StyledCardLabel>{label}</StyledCardLabel>\n        <StyledDivider></StyledDivider>\n        <StyledFeatureDescription>{description}</StyledFeatureDescription>\n      </StyledFeatureCard>\n    );\n  });\n\n  return (\n    <StyledSection id={id}>\n      {title && <StyledH1>{title}</StyledH1>}\n      <StyledTextSection dangerouslySetInnerHTML={{ __html: description }} />\n      <StyledFeatureGridContainer>{featureCards}</StyledFeatureGridContainer>\n    </StyledSection>\n  );\n};\n\nCardGrid.propTypes = {\n  cards: PropTypes.array.isRequired,\n  description: PropTypes.string.isRequired,\n  id: PropTypes.string,\n  title: PropTypes.string,\n};\n\nexport default CardGrid;\n","import styled from '@emotion/styled';\nimport Img from 'gatsby-image';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Icon from './icon';\nimport TextLink from './links/text-link';\nimport TechList from './tech-list';\nimport { mq } from './_shared/media';\nimport { StyledContentLink } from './_shared/styled-content-link';\nimport { StyledH1, StyledH2 } from './_shared/styled-headings';\nimport { StyledImageContainer } from './_shared/styled-image-container';\nimport { contentBox, flexCenter, flexEnd } from './_shared/styled-mixins';\nimport { StyledSection } from './_shared/styled-section';\n\nconst StyledFeaturedProject = styled.article`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 1.5rem;\n  padding: 1.5rem 0;\n\n  ${mq.gt.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  &:nth-of-type(even) {\n    direction: rtl;\n  }\n  &:nth-of-type(even) * {\n    direction: ltr;\n  }\n`;\nconst StyledProjectInfoContainer = styled.section`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\nconst StyledDescription = styled.section`\n  ${contentBox}\n  max-height: 160px;\n  position: relative;\n  padding: 10px;\n\n  > p {\n    height: 100%;\n    margin: 0;\n    font-size: 0.8rem;\n    overflow: hidden;\n  }\n`;\nconst StyledLinkContainer = styled.section`\n  ${flexEnd};\n  // margin: 10px 0;\n\n  & > a {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--body-color);\n\n    &:hover {\n      color: var(--primary-color);\n    }\n  }\n\n  & svg {\n    margin: 0 0.5rem;\n  }\n`;\nconst StyledArchiveContainer = styled.div`\n  ${flexCenter};\n  width: 100%;\n  margin-top: 1.5rem;\n`;\n\nconst FeaturedProjects = ({ featured }) => {\n  const featuredProjects = featured.map((project, index) => {\n    const coverImage = project.frontmatter.cover_image ? project.frontmatter.cover_image.childImageSharp.fluid : null;\n\n    const title = project.frontmatter.title;\n    const demoLink = project.frontmatter.demo_link;\n    const repoLink = project.frontmatter.repo_link;\n    const demoLinkLabel = `featured project ${title} demo`;\n    const repoLinkLabel = `featured project ${title} repo`;\n\n    return (\n      <StyledFeaturedProject key={title + index}>\n        <a\n          aria-label={demoLink ? demoLinkLabel : repoLink ? repoLinkLabel : `featured project ${title}`}\n          href={demoLink ? demoLink : repoLink ? repoLink : '#'}\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          {coverImage && (\n            <StyledImageContainer hasHover>\n              <Img fluid={coverImage} />\n            </StyledImageContainer>\n          )}\n        </a>\n        <StyledProjectInfoContainer>\n          <StyledContentLink href={demoLink ? demoLink : repoLink ? repoLink : '#'} target=\"_blank\" rel=\"noopener\">\n            <StyledH2>{title}</StyledH2>\n          </StyledContentLink>\n          <StyledDescription dangerouslySetInnerHTML={{ __html: project.html }} />\n          <TechList techs={project.frontmatter.techs} />\n          <StyledLinkContainer>\n            {repoLink && (\n              <a href={repoLink} target=\"_blank\" rel=\"noopener\" title=\"Repository Link\" aria-label={repoLinkLabel}>\n                <Icon icon=\"github\" prefix=\"fab\" />\n              </a>\n            )}\n            {demoLink && (\n              <a href={demoLink} target=\"_blank\" rel=\"noopener\" title=\"Demo Link\" aria-label={demoLinkLabel}>\n                <Icon icon=\"external-link-alt\" />\n              </a>\n            )}\n          </StyledLinkContainer>\n        </StyledProjectInfoContainer>\n      </StyledFeaturedProject>\n    );\n  });\n\n  return (\n    <StyledSection id=\"projects\">\n      <StyledH1>Featured Projects</StyledH1>\n      {featuredProjects}\n      <StyledArchiveContainer>\n        <TextLink label=\"See all my projects\" link=\"/projects\" />\n      </StyledArchiveContainer>\n      <StyledArchiveContainer>\n        <TextLink label=\"See what I've been reading to keep my skills up to date\" link=\"/blog\" />\n      </StyledArchiveContainer>\n    </StyledSection>\n  );\n};\n\nFeaturedProjects.propTypes = {\n  featured: PropTypes.array.isRequired,\n};\n\nexport default FeaturedProjects;\n","import styled from '@emotion/styled';\nimport React from 'react';\nimport Icon from '../icon';\nimport { flexCenter } from './../_shared/styled-mixins';\n\nexport const StyledButtonLink = styled.a`\n  ${flexCenter};\n  text-decoration: none;\n  color: var(--bg-content-color) !important;\n  background-color: var(--title-color);\n  font-size: 0.9rem;\n  font-weight: 500;\n  white-space: nowrap;\n  position: relative;\n  border: none;\n  padding: 0.4rem 0.8rem;\n\n  &:hover {\n    color: var(--primary-color) !important;\n  }\n\n  &:after {\n    content: '';\n    z-index: -1;\n    border: 1px solid var(--title-color);\n    position: absolute;\n    bottom: -3px;\n    right: -3px;\n    width: 100%;\n    height: 100%;\n    transition: all ease var(--transition-fast);\n  }\n\n  &:hover:after {\n    border: 1px solid var(--primary-color);\n    bottom: -5px;\n    right: -5px;\n  }\n\n  & > svg {\n    fill: var(--bg-content-color);\n    height: 0.8rem;\n    margin-left: 0.25rem;\n  }\n\n  &:hover > svg {\n    fill: var(--primary-color);\n  }\n`;\n\nconst ButtonLink = ({ label, link }) => {\n  return (\n    <React.Fragment>\n      {label && link && (\n        <StyledButtonLink href={link ? link : '#'} target=\"_blank\" rel=\"noopener\">\n          {label}\n          <Icon icon=\"arrow-right\" />\n        </StyledButtonLink>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default ButtonLink;\n","import { keyframes } from '@emotion/core'\n\nexport const scroll = keyframes`\n  0% {\n    opacity: 0;\n  }\n\n  10% {\n    transform: translateY(0);\n    opacity: 1;\n  }\n\n  100% {\n    transform: translateY(10px);\n    opacity: 0;\n  }\n`;","import styled from '@emotion/styled';\nimport React from 'react';\nimport { scroll } from './_shared/animation';\nimport { mq } from './_shared/media';\nimport { flexCenter } from './_shared/styled-mixins';\n\nconst StyledContainer = styled.div`\n  position: absolute;\n  bottom: 20px;\n  left: 0;\n  right: 0;\n  width: 100%;\n  ${flexCenter};\n  flex-direction: column;\n\n  display: none;\n\n  ${mq.gt.xs} {\n    display: flex;\n  }\n`;\nconst StyledMouse = styled.div`\n  width: 20px;\n  height: 30px;\n  padding: 0 6px;\n  border: 2px solid #fff;\n  border-radius: 20px;\n`;\nconst StyledScroller = styled.div`\n  position: relative;\n  left: 50%;\n  top: 6px;\n  margin-left: -1px;\n  width: 2px;\n  height: 6px;\n  background: var(--primary-color);\n  border-radius: 25%;\n  animation-name: ${scroll};\n  animation-duration: 2.2s;\n  animation-timing-function: cubic-bezier(0.15, 0.41, 0.69, 0.94);\n  animation-iteration-count: infinite;\n`;\nconst StyledScrollText = styled.span`\n  font-size: 0.7rem;\n  margin: 20px 0;\n`;\n\nconst ScrollIndicator = () => {\n  return (\n    <StyledContainer>\n      <StyledScrollText>Scroll down</StyledScrollText>\n      <StyledMouse>\n        <StyledScroller />\n      </StyledMouse>\n    </StyledContainer>\n  );\n};\n\nScrollIndicator.propTypes = {};\n\nexport default ScrollIndicator;\n","import styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ButtonLink from './links/button-link';\nimport ScrollIndicator from './scroll-indicator';\nimport { mq } from './_shared/media';\nimport { StyledSection } from './_shared/styled-section';\n\nconst StyledHeroSection = styled(StyledSection)`\n  min-height: calc(100vh - 2 * var(--header-height));\n  position: relative;\n\n  ${mq.gt.sm} {\n    min-height: calc(100vh - var(--header-height));\n  }\n`;\nconst StyledIntroduction = styled.div`\n  color: var(--primary-color);\n  font-weight: normal;\n`;\nconst StyledAuthor = styled.h1`\n  margin-left: -4px !important;\n  font-size: 40px;\n  line-height: 1.1;\n  margin: 0;\n  word-break: break-word;\n\n  ${mq.gt.xs} {\n    font-size: 80px;\n  }\n`;\nconst StyledTagline = styled.h2`\n  margin-left: -4px !important;\n  font-size: 40px;\n  line-height: 1.1;\n  margin: 0;\n  color: var(--primary-color);\n  word-break: break-word;\n\n  ${mq.gt.xs} {\n    font-size: 80px;\n  }\n`;\nconst StyledDescription = styled.div`\n  margin-top: 0.5rem;\n  width: 100%;\n  max-width: 500px;\n`;\n\nconst Hero = ({ data }) => {\n  const { introduction, author, tagline, description, ctaLink, ctaLabel } = data;\n\n\n  return (\n    <StyledHeroSection>\n      <StyledIntroduction>{introduction}</StyledIntroduction>\n      <StyledAuthor>{author}</StyledAuthor>\n      <StyledTagline>{tagline}</StyledTagline>\n      <StyledDescription dangerouslySetInnerHTML={{ __html: description }} />\n      <ButtonLink label={ctaLabel} link={ctaLink} />\n      <ScrollIndicator />\n    </StyledHeroSection>\n  );\n};\n\nHero.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n\nexport default Hero;\n","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport Img from 'gatsby-image';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport TextLink from './links/text-link';\nimport TagList from './tag-list';\nimport { mq } from './_shared/media';\nimport { StyledH1, StyledH2 } from './_shared/styled-headings';\nimport { StyledImageContainer } from './_shared/styled-image-container';\nimport { flexCenter } from './_shared/styled-mixins';\nimport { StyledSection } from './_shared/styled-section';\nimport { StyledTextSection } from './_shared/styled-text-section';\n\nconst StyledPostsContainer = styled.article`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 2.5rem;\n  margin-top: 2.5rem;\n\n  ${mq.gt.xs} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;\nconst StyledPostContainer = styled.article`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  border-radius: var(--radius);\n\n  & .gatsby-image-wrapper {\n    max-height: 300px;\n  }\n`;\nconst StyledDateOverlay = styled.div`\n  pointer-events: none;\n  z-index: 1;\n  position: absolute;\n  top: 0.5rem;\n  left: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  height: 3rem;\n  width: 3rem;\n  color: var(--title-color);\n  background: var(--bg-code);\n  align-items: center;\n  border-radius: var(--radius);\n  font-weight: 500;\n  line-height: 1rem;\n`;\nconst StyledTitleLink = styled(Link)`\n  text-decoration: none;\n\n  &:hover h2 {\n    color: var(--primary-color);\n  }\n`;\nconst StyledBlogLinkContainer = styled.div`\n  ${flexCenter};\n  width: 100%;\n  margin-top: 2.5rem;\n`;\n\nconst RecentPosts = ({ data }) => {\n  const recentPosts = data.map((post) => {\n    const { title, tags, description, date } = post.node.frontmatter;\n    const coverImage = post.node.frontmatter.cover_image\n      ? post.node.frontmatter.cover_image.childImageSharp.fluid\n      : null;\n\n    const link = `/blog` + post.node.fields.slug;\n\n    const month = new Date(date).toLocaleDateString('en-EN', { month: 'short' });\n    const day = new Date(date).toLocaleDateString('en-EN', { day: '2-digit' });\n\n    return (\n      <StyledPostContainer key={title}>\n        <StyledDateOverlay>\n          <span>{month}</span>\n          <span>{day}</span>\n        </StyledDateOverlay>\n        <Link to={link} aria-label={`recent post ${title}`}>\n          <StyledImageContainer>{coverImage && <Img fluid={coverImage} />}</StyledImageContainer>\n        </Link>\n        <TagList tags={tags} />\n        <StyledTitleLink to={link}>\n          <StyledH2>{title}</StyledH2>\n        </StyledTitleLink>\n        <StyledTextSection>\n          <p>{description}</p>\n        </StyledTextSection>\n      </StyledPostContainer>\n    );\n  });\n\n  return (\n    <StyledSection id=\"blog\">\n      <StyledH1>Latest Blog Posts</StyledH1>\n      <StyledPostsContainer>{recentPosts}</StyledPostsContainer>\n      <StyledBlogLinkContainer>\n        <TextLink label=\"View All Posts\" link=\"/blog\" />\n      </StyledBlogLinkContainer>\n    </StyledSection>\n  );\n};\n\nRecentPosts.propTypes = {\n  data: PropTypes.array.isRequired,\n};\n\nexport default RecentPosts;\n","import { graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport About from '../components/about';\nimport CardGrid from '../components/card-grid';\nimport Contact from '../components/contact';\nimport FeaturedProjects from '../components/featured-projects';\nimport Hero from '../components/hero';\nimport Layout from '../components/layout';\nimport RecentPosts from '../components/recent-posts';\nimport SEO from '../components/seo';\nimport { indexMenuLinks } from '../components/_config/menu-links';\n\nconst Index = ({ data }) => {\n  const heroData = {\n    author: data.site.siteMetadata.author,\n    tagline: data.hero.frontmatter.tagline,\n    description: data.hero.html,\n    introduction: data.hero.frontmatter.introduction,\n    ctaLabel: data.hero.frontmatter.cta_label,\n    ctaLink: data.hero.frontmatter.cta_link,\n  };\n\n  return (\n    <Layout menuLinks={indexMenuLinks}>\n      <SEO title=\"Home\" />\n      <Hero data={heroData} />\n      <About data={data.about} />\n      {/* <CardGrid cards={data.cards.frontmatter.cards} description={data.cards.html} title=\"Our Features\" id=\"features\" /> */}\n      <FeaturedProjects featured={data.featuredProjects.nodes} />\n      {/* <RecentPosts data={data.blog.edges} /> */}\n      <Contact data={data.contact} />\n    </Layout>\n  );\n};\n\nIndex.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n\nexport default Index;\n\nexport const query = graphql`\n  {\n    site {\n      siteMetadata {\n        author\n      }\n    }\n\n    hero: markdownRemark(fileAbsolutePath: { regex: \"/content/sections/hero/\" }) {\n      frontmatter {\n        introduction\n        tagline\n        cta_label\n        cta_link\n      }\n      html\n    }\n\n    about: markdownRemark(fileAbsolutePath: { regex: \"/content/sections/about/\" }) {\n      frontmatter {\n        title\n        techs\n        about_image {\n          childImageSharp {\n            fluid(maxWidth: 800) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n      html\n    }\n\n    cards: markdownRemark(fileAbsolutePath: { regex: \"/content/sections/cards/\" }) {\n      frontmatter {\n        cards {\n          label\n          icon\n          prefix\n          description\n        }\n      }\n      html\n    }\n\n    featuredProjects: allMarkdownRemark(\n      limit: 4\n      sort: { order: DESC, fields: frontmatter___date }\n      filter: { fileAbsolutePath: { regex: \"/content/projects/\" }, frontmatter: { featured: { eq: true } } }\n    ) {\n      nodes {\n        frontmatter {\n          date(formatString: \"D MMMM, YYYY\")\n          title\n          repo_link\n          demo_link\n          techs\n          cover_image {\n            childImageSharp {\n              fluid(maxWidth: 800) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n        html\n      }\n    }\n\n    blog: allMarkdownRemark(\n      sort: { order: DESC, fields: frontmatter___date }\n      limit: 4\n      filter: { fileAbsolutePath: { regex: \"/content/posts/\" }, frontmatter: { published: { ne: false } } }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            tags\n            date(formatString: \"D MMMM, YYYY\")\n            description\n            cover_image {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          excerpt\n          fields {\n            slug\n          }\n        }\n      }\n    }\n\n    contact: markdownRemark(fileAbsolutePath: { regex: \"/content/sections/contact/\" }) {\n      frontmatter {\n        phone\n        email\n        address\n      }\n      html\n    }\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const StyledContentLink = styled.a`\n  text-decoration: none;\n\n  &:hover > * {\n    cursor: pointer;\n    color: var(--primary-color);\n  }\n`;\n","import styled from '@emotion/styled';\nimport { contentBox } from './styled-mixins';\n\nexport const StyledTextSection = styled.section`\n  white-space: pre-line;\n\n  ${contentBox}\n  max-width: unset;\n  max-height: 180px;\n  position: relative;\n  padding: 10px;\n  margin: 0;\n\n  > p {\n    height: 100%;\n    margin: 0;\n    font-size: 0.8rem;\n    overflow: hidden;\n  }\n`;\n"],"sourceRoot":""}